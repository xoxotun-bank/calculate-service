package com.example.calculateservice.swagger.server.api;

/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.56).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

import com.example.calculateservice.swagger.server.model.ApiErrorResponseDto;
import java.math.BigDecimal;
import com.example.calculateservice.swagger.server.model.PaymentsTableResponseDto;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;


@Validated
public interface PaymentsTablesApi {

    Logger log = LoggerFactory.getLogger(PaymentsTablesApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();



    @Operation(summary = "Метод получения Календаря выплат по выбранному вкладу", description = "Метод получения Календаря выплат по выбранному вкладу", security = {
            @SecurityRequirement(name = "BearerAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Успешный ответ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentsTableResponseDto.class))),

            @ApiResponse(responseCode = "400", description = "Bad request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiErrorResponseDto.class))),

            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiErrorResponseDto.class))),

            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiErrorResponseDto.class))),

            @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiErrorResponseDto.class))) })
    @RequestMapping(value = "/payments-tables",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<PaymentsTableResponseDto> paymentsTablesGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Есть ли капитализация" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "capitalizationToSameAccount", required = true) Boolean capitalizationToSameAccount
            , @NotNull @Parameter(in = ParameterIn.QUERY, description = "Периодичность капитализации/выплат по вкладу" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "capitalizationPeriod", required = true) String capitalizationPeriod
            , @NotNull @DecimalMin("0")@Parameter(in = ParameterIn.QUERY, description = "Сумма, которую клиент хочет разместить в банке" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "sum", required = true) BigDecimal sum
            , @NotNull @Parameter(in = ParameterIn.QUERY, description = "Срок на который вклад можно открыть" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "period", required = true) Integer period
            , @NotNull @Parameter(in = ParameterIn.QUERY, description = "Процент по вкладу" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "percent", required = true) BigDecimal percent
    );

}


